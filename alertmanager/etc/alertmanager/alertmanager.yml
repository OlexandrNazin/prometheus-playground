global:
  resolve_timeout: 5m
  smtp_smarthost: 'mailserver:3025'
  smtp_require_tls: false
  smtp_from: 'donotreply@alertmanager.local'

# The root route on which each incoming alert enters.
route:
  # The root route must not have any matchers as it is the entry point for
  # all alerts. It needs to have a receiver configured so alerts that do not
  # match any of the sub-routes are sent to someone.
  #receiver: 'team-admin-mails'
  receiver: 'custom-mail'

  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  group_by: ['alertname', 'cluster']

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first
  # notification.
  group_wait: 2m

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 10m

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  # Should be 3h for production
  repeat_interval: 15m

  # All the above attributes are inherited by all child routes and can
  # overwritten on each.

  # The child route trees.
  routes:
  # This routes performs a regular expression match on alert labels to
  # catch alerts that are related to a list of services.
  # rule 1.0
  - match_re:
      service: ^(foo1|foo2|baz)$
    receiver: team-admin-mails

    # The service has a sub-route for critical alerts, any alerts
    # that do not match, i.e. severity != critical, fall-back to the
    # parent node and are sent to 'team-X-mails'
    # rule 1.1
    routes:
    - match:
        severity: critical
      receiver: team-24x7-ops

  # rule for all messages which have tag "service==files"
  # rule 2.0
  - match:
      service: files
    receiver: web.hook

    # rule for all messages which have tag "service==files" and
    # severity==critical
    # rule 2.1
    routes:
    - match:
        severity: critical
      receiver: team-dev-mails

  # This route handles all alerts coming from a database service. If there's
  # no team to handle it, it defaults to the DB team.
  # rule 3.0
  - match:
      service: database

    receiver: team-DB-mails
    # Also group alerts by affected database.
    group_by: [alertname, cluster, database]
    # continue to check other rules instead of stopping after match
    continue: true

    routes:
    - match:
        owner: team-X
      receiver: team-admin-mails

    - match:
        owner: team-Y
      receiver: team-dev-mails


# Inhibition rules allow to mute a set of alerts given that another alert is
# firing.
# We use this to mute any warning-level notifications if the same alert is
# already critical.
inhibit_rules:
- source_match:
    severity: 'critical'
  target_match:
    severity: 'warning'
  # Apply inhibition if the alertname is the same.
  equal: ['alertname']

# general receiver configuration
receivers:
- name: 'web.hook'
  webhook_configs:
  - url: 'http://127.0.0.1:5001/'

- name: 'team-admin-mails'
  email_configs:
  - to: 'admin@playground.local'

# sample for a custom mail configuration
- name: 'custom-mail'
  email_configs:
  - to: 'admin@playground.local'
    send_resolved: true
    headers:
      Subject: 'custom {{ template "email.default.subject" . }}'
    html: 'Custom - Text - {{ template "email.default.html" . }}'

# sample for alert to different channcels
- name: 'team-24x7-ops'
  email_configs:
  - to: 'admin@playground.local'
  pagerduty_configs:
  - service_key: <team-X-key>

- name: 'team-dev-mails'
  email_configs:
  - to: 'team-dev@playground.local'

- name: 'team-DB-mails'
  email_configs:
  - to: 'team-dbadmins@playground.local'
